#!/usr/bin/env node

var fs = require("fs");
var spawn = require("child_process").spawn;
var pg = require("pg");
var prompt = require("prompt");

var conf = JSON.parse(fs.readFileSync("conf.json"));

function isRunning()
{
	return (fs.existsSync(".pid"));
}

function query(sql, cb)
{
	if (typeof sql !== "string")
		throw new Error("Sql query must be a string.");

	var pgClient = new pg.Client(conf.postgres);

	pgClient.connect(function(err)
	{
		if (err)
			return cb("Could not connect to postgres. "+err);

		pgClient.query(sql, function(err, result)
		{
			if (err)
				return cb("Error running query. "+err);

			cb();
		});
	});
}

switch (process.argv[2])
{
case "start":
	if (isRunning())
		return console.log("Frum is already runing.");

	var child = spawn("node", ["server.js"]);
	fs.writeFileSync(".pid", child.pid);
	console.log("Running with PID "+child.pid+".");

	break;

case "stop":
	if (!isRunning())
		return console.log("Frum is not running.");

	try
	{
		process.kill(fs.readFileSync(".pid"));
	}
	catch(err)
	{
		if (err.code !== "ESRCH")
			return console.log("Could not kill process.", err);
	}

	fs.unlinkSync(".pid");

	break;

case "setup":
	if (isRunning())
		return console.log("Please stop Frum first.");

	var sql = fs.readFileSync("sql/setup.sql", "UTF-8");

	query(sql, function(err)
	{
		if (err)
			console.log(err, "\nYou may need to reset the database first.");
		else
			console.log("Database setup complete.");

		process.exit();
	});

	break;

case "reset":
	if (isRunning())
		return console.log("Please stop Frum first.");

	prompt.start();
	prompt.message = "This will delete everything from the database, and cannot be undone. Are you sure?";
	prompt.delimiter = " ";
	prompt.colors = false;
	prompt.get(["y/n"], function(err, result)
	{
		if (err)
			return;

		if (result["y/n"] !== "y")
			return console.log("Not resetting the database.");

		var sql = fs.readFileSync("sql/reset.sql", "utf-8");

		query(sql, function(err)
		{
			if (err)
				console.log(err);
			else
				console.log("Database reset.");

			process.exit();
		});
	});

	break;

default:
	console.log("Usage: frum <start|stop|setup|reset>");

	break;
}
